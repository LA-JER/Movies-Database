lat + long + grade + sqft_living15 + sqft_lot15, data = kchouse,
family = "binomial")
msummary(mod_log2)
lrtest(mod_log2)
auglogkchouse2 <- augment(mod_log2, type.predict = "response")
#evaluate model using  ROC curves
predpr2 <- predict(mod_log2, type=c("response"))
roccurve <- with(auglogkchouse2, roc(above_500k ~ predpr2))
plot(roccurve)
print(roccurve)
mod_log3 <- glm(above_500k ~  bedrooms + bathrooms + sqft_living +
sqft_lot + floors + waterfront + view + condition +
grade + sqft_basement + yr_built + zipcode +
lat + grade + sqft_living15, data = kchouse,
family = "binomial")
msummary(mod_log2)
lrtest(mod_log2)
auglogkchouse2 <- augment(mod_log2, type.predict = "response")
mod_log3 <- glm(above_500k ~  bedrooms + bathrooms + sqft_living +
sqft_lot + floors + waterfront + view + condition +
grade + sqft_basement + yr_built + zipcode +
lat + grade + sqft_living15, data = kchouse,
family = "binomial")
msummary(mod_log3)
lrtest(mod_log3)
auglogkchouse3 <- augment(mod_log3, type.predict = "response")
#evaluate model using  ROC curves
predpr3 <- predict(mod_log3, type=c("response"))
roccurve <- with(auglogkchouse3, roc(above_500k ~ predpr3))
plot(roccurve)
print(roccurve)
#| label: setup
#| include: FALSE
library(mice)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE
, tidy=FALSE      # display code as typed
, size="small")   # slightly smaller font for code)
library(tidyverse)
library(logbin)
#set seed for reproducibility
set.seed(3)
#nsim
nsim <- 1
#nobs
nobs <- 1000
#initiate matrix to store standard errors
test_mat <- matrix(NA, nsim, 4)
#create predictor variables
x1 <- rnorm(nobs, mean = 0, sd = 1)
x2 <- rnorm(nobs, mean = 0, sd = 1)
x3 <- rnorm(nobs, mean = 0, sd = 1)
x4 <- rnorm(nobs, mean = 0, sd = 1)
x5 <- rnorm(nobs, mean = 0, sd = 1)
#outcome
y = x1 + x2 + x3 + x4 + x5
#missing data mechanism
p_data <- c(-0.05, 0.3, 0.3, 0.3)
p_mat <- matrix(p_data, nrow = 4, ncol = 1, byrow = TRUE)
data = data.frame(1, X1 = x1, X3 = x3, X5 = x5)
c_mat <- as.matrix(data)
logit_p = c_mat %*% p_mat
p = exp(logit_p) / (1 + exp(logit_p))
r_ind <- rbinom(nobs, 1, p)
y[r_ind==0] = NA
#complete case
mod_comp <- lm(y ~ x1 + x2 + x3 + x4 + x5)
#get summary stats
summary(mod_comp)
#IPW METHODS
miss <- data.frame(y=y, x1=x1, x2=x2, x3=x3, x4=x4, x5=x5) %>%
mutate(obs = ifelse(is.na(y), yes = 0, no = 1))
#1  LOGISTIC REGRESSION
#log_regression response model
mod_log <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss, family = "binomial")
summary(mod_log)
#calculate pred probs and weights
mod_log_ipw <- miss %>%
mutate(prob_obs = predict(mod_log, type = "response"),
wt = ifelse(is.na(y), yes = 0, no = 1/prob_obs))
#fit weighted linear model on log_reg
ipw_log <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_log_ipw, weights = wt)
#2 LOG BINOMIAL
# #log_binomial response model
# mod_logbin <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
#                   family = binomial(link = "log"))
# summary(mod_logbin)
#
# #calculate pred probs and weights
# mod_logbin_ipw <- miss %>%
#   mutate(prob_obs2 = predict(mod_logbin, type= "response"),
#          wt2 = ifelse(is.na(y), yes = 0, no = 1/ prob_obs2))
#
# #fit weighted linear model
# ipw_logbin <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_logbin_ipw,
#                  weights = wt2)
#3 POISSON IPW
#poisson response model
mod_pois <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
family = "poisson")
summary(mod_pois)
#calculate pred probs and weights
mod_pois_ipw <- miss %>%
mutate(prob_obs3 = predict(mod_pois, type= "response"),
wt3 = ifelse(is.na(y), yes = 0, no = 1/ prob_obs3))
#fit weighted linear model
ipw_pois <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_pois_ipw,
weights = wt3)
#4 PROBIT IPW
#fit probit response model
mod_prob <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
family = binomial(link = "probit"))
summary(mod_prob)
#calculate predicted probs and weights
mod_prob_ipw <- miss %>%
mutate(prob_obs4 = predict(mod_prob, type = "response"),
wt4 = ifelse(is.na(y), yes = 0, no = 1 / prob_obs4))
#fit weighted linear model
ipw_prob <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_prob_ipw,
weights = wt4)
#get test errors for complete case, log_ipw, log_bin_ipw and poisson models
comp_std <- summary(mod_comp)$coefficicients[3]
log_std <- summary(ipw_log)$coefficicients[3]
#logbin_std <- summary(ipw_logbin)$coefficicients[3]
pois_std <- summary(ipw_pois)$coefficicients[3]
prob_std <- summary(ipw_prob)
test_mat[i,1] <- comp_std
#set seed for reproducibility
set.seed(3)
#nsim
nsim <- 1
#nobs
nobs <- 1000
#initiate matrix to store standard errors
test_mat <- matrix(NA, nsim, 4)
for(i in 1:nsim){
#create predictor variables
x1 <- rnorm(nobs, mean = 0, sd = 1)
x2 <- rnorm(nobs, mean = 0, sd = 1)
x3 <- rnorm(nobs, mean = 0, sd = 1)
x4 <- rnorm(nobs, mean = 0, sd = 1)
x5 <- rnorm(nobs, mean = 0, sd = 1)
#outcome
y = x1 + x2 + x3 + x4 + x5
#missing data mechanism
p_data <- c(-0.05, 0.3, 0.3, 0.3)
p_mat <- matrix(p_data, nrow = 4, ncol = 1, byrow = TRUE)
data = data.frame(1, X1 = x1, X3 = x3, X5 = x5)
c_mat <- as.matrix(data)
logit_p = c_mat %*% p_mat
p = exp(logit_p) / (1 + exp(logit_p))
r_ind <- rbinom(nobs, 1, p)
y[r_ind==0] = NA
#complete case
mod_comp <- lm(y ~ x1 + x2 + x3 + x4 + x5)
#get summary stats
summary(mod_comp)
#IPW METHODS
miss <- data.frame(y=y, x1=x1, x2=x2, x3=x3, x4=x4, x5=x5) %>%
mutate(obs = ifelse(is.na(y), yes = 0, no = 1))
#1  LOGISTIC REGRESSION
#log_regression response model
mod_log <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss, family = "binomial")
summary(mod_log)
#calculate pred probs and weights
mod_log_ipw <- miss %>%
mutate(prob_obs = predict(mod_log, type = "response"),
wt = ifelse(is.na(y), yes = 0, no = 1/prob_obs))
#fit weighted linear model on log_reg
ipw_log <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_log_ipw, weights = wt)
#2 LOG BINOMIAL
# #log_binomial response model
# mod_logbin <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
#                   family = binomial(link = "log"))
# summary(mod_logbin)
#
# #calculate pred probs and weights
# mod_logbin_ipw <- miss %>%
#   mutate(prob_obs2 = predict(mod_logbin, type= "response"),
#          wt2 = ifelse(is.na(y), yes = 0, no = 1/ prob_obs2))
#
# #fit weighted linear model
# ipw_logbin <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_logbin_ipw,
#                  weights = wt2)
#3 POISSON IPW
#poisson response model
mod_pois <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
family = "poisson")
summary(mod_pois)
#calculate pred probs and weights
mod_pois_ipw <- miss %>%
mutate(prob_obs3 = predict(mod_pois, type= "response"),
wt3 = ifelse(is.na(y), yes = 0, no = 1/ prob_obs3))
#fit weighted linear model
ipw_pois <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_pois_ipw,
weights = wt3)
#4 PROBIT IPW
#fit probit response model
mod_prob <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
family = binomial(link = "probit"))
summary(mod_prob)
#calculate predicted probs and weights
mod_prob_ipw <- miss %>%
mutate(prob_obs4 = predict(mod_prob, type = "response"),
wt4 = ifelse(is.na(y), yes = 0, no = 1 / prob_obs4))
#fit weighted linear model
ipw_prob <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_prob_ipw,
weights = wt4)
#get test errors for complete case, log_ipw, log_bin_ipw and poisson models
comp_std <- summary(mod_comp)$coefficicients[3]
log_std <- summary(ipw_log)$coefficicients[3]
#logbin_std <- summary(ipw_logbin)$coefficicients[3]
pois_std <- summary(ipw_pois)$coefficicients[3]
prob_std <- summary(ipw_prob)
test_mat[i,1] <- comp_std
test_mat[i,2] <- log_std
# test_mat[i,3] <- logbin_std
test_mat[i,3] <- pois_std
test_mat[i,4] <- prob_std
}
comp_std <- summary(mod_comp)$coefficicients[3]
#set seed for reproducibility
set.seed(3)
#nsim
nsim <- 1
#nobs
nobs <- 1000
#initiate matrix to store standard errors
test_mat <- matrix(NA, nsim, 4)
set.seed(3)
#nsim
nsim <- 1
#nobs
nobs <- 1000
#initiate matrix to store standard errors
test_mat <- matrix(NA, nsim, 4)
x1 <- rnorm(nobs, mean = 0, sd = 1)
x2 <- rnorm(nobs, mean = 0, sd = 1)
x3 <- rnorm(nobs, mean = 0, sd = 1)
x4 <- rnorm(nobs, mean = 0, sd = 1)
x5 <- rnorm(nobs, mean = 0, sd = 1)
y = x1 + x2 + x3 + x4 + x5
p_data <- c(-0.05, 0.3, 0.3, 0.3)
p_mat <- matrix(p_data, nrow = 4, ncol = 1, byrow = TRUE)
data = data.frame(1, X1 = x1, X3 = x3, X5 = x5)
c_mat <- as.matrix(data)
logit_p = c_mat %*% p_mat
p = exp(logit_p) / (1 + exp(logit_p))
r_ind <- rbinom(nobs, 1, p)
y[r_ind==0] = NA
#complete case
mod_comp <- lm(y ~ x1 + x2 + x3 + x4 + x5)
summary(mod_comp)
summary(mod_comp)
miss <- data.frame(y=y, x1=x1, x2=x2, x3=x3, x4=x4, x5=x5) %>%
mutate(obs = ifelse(is.na(y), yes = 0, no = 1))
mod_log <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss, family = "binomial")
summary(mod_log)
comp_std <- summary(mod_comp)$coefficicients[3]
comp_std
#| label: setup
#| include: FALSE
library(mice)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE
, tidy=FALSE      # display code as typed
, size="small")   # slightly smaller font for code)
library(tidyverse)
#| label: my-sim
# set seed
set.seed(123)
#nsim
nsim <- 1000
#nobs
nobs <- 1000
#alpha
alpha <- 0.218
beta_mat <- matrix(NA, nsim, 3)
test_mat <- matrix(NA, nsim, 3)
for(i in 1:nsim){
#create z1
z1 <- rnorm(nobs, mean = 0, sd = 1)
z2 <- rnorm(nobs, mean = 0, sd = 1)
z3 <- rnorm(nobs, mean = 0, sd = 1)
z4 <- rnorm(nobs, mean = 0, sd = 1)
z5 <- rnorm(nobs, mean = 0, sd = 1)
z6 <- rnorm(nobs, mean = 0, sd = 1)
z7 <- rnorm(nobs, mean = 0, sd = 1)
#exposure of interest
x <- 1 + (alpha * z1) + (alpha * z2) + (alpha * z5) + (alpha * z6)
#outcome
y <- 1 + 0.5 + (0.170*z1) + (0.230*z3) + (0.170*z5) + (0.230*z7)
#missing data mechanism
#logit(p) <- -0.5 + (0.2*x) + (0.1*z1) +(0.1*z2). + (0.1*z3) + (0.1*z4)
p_data <- c(-0.05, 0.2, 0.1, 0.1, 0.1, 0.1)
p_mat <- matrix(p_data,nrow=6, ncol = 1, byrow = TRUE)
data <- data.frame(1, X1 = x, Z1 = z1, Z2 = z2, Z3 = z3, Z4 = z4 )
c_mat <- as.matrix(data)
logit_p = c_mat %*% p_mat
p = exp(logit_p) / (1 + exp(logit_p))
r_ind <- rbinom(nobs, 1, p)
y[r_ind==0] = NA
#complete case
mod_comp <- lm(y ~ x + z1 + z3 + z5 + z7)
#get summary stats
summary(mod_comp)
#stochastic regression
imp <- mice(data.frame(y=y, x=x, z1=z1, z2=z2,z3=z3, z5=z5, z7=z7), method="norm.nob", m=1, maxit = 1)
#impute data
imp_data <- complete(imp)
#fit linear stoch model
mod_stoch <- lm(y ~ x + z1 +  z3 + z5 + z7, data = imp_data)
summary(mod_stoch)
#ipw approach
miss <- data.frame(y=y, x=x, z1 = z1) %>%
mutate(obs = ifelse(is.na(y), yes = 0, no = 1))
#response model
mod_resp <- glm(obs ~ x + z1, data = miss, family = "binomial")
summary(mod_resp)
mod_ipw <- miss %>%
mutate(prob_obs = predict(mod_resp, type = "response"),
wt = ifelse(is.na(y), yes = 0, no =1/prob_obs))
#fit weighted linear model
ipw <- lm(y ~ x + z1, data = mod_ipw, weights = wt)
#get coefficient of x for complete case, stoch regression and ipw
comp_x <- summary(mod_comp)$coefficients[2]
stoch_x <- summary(mod_stoch)$coefficients[2]
ipw_x <- summary(ipw)$coefficients[2]
#add coefficients to matrix
beta_mat[i,1] <- comp_x
beta_mat[i,2] <- stoch_x
beta_mat[i,3] <- ipw_x
#get test errors
comp_std <- summary(mod_comp)$coefficients[3]
stoch_std <- summary(mod_stoch)$coefficients[3]
ipw_std <- summary(ipw)$coefficients[3]
test_mat[i,1] <- comp_std
test_mat[i,2] <- stoch_std
test_mat[i,3] <- ipw_std
}
library(tidyverse)
#| label: my-sim
# set seed
set.seed(123)
#nsim
nsim <- 1
#nobs
nobs <- 1000
#alpha
alpha <- 0.218
beta_mat <- matrix(NA, nsim, 3)
test_mat <- matrix(NA, nsim, 3)
for(i in 1:nsim){
#create z1
z1 <- rnorm(nobs, mean = 0, sd = 1)
z2 <- rnorm(nobs, mean = 0, sd = 1)
z3 <- rnorm(nobs, mean = 0, sd = 1)
z4 <- rnorm(nobs, mean = 0, sd = 1)
z5 <- rnorm(nobs, mean = 0, sd = 1)
z6 <- rnorm(nobs, mean = 0, sd = 1)
z7 <- rnorm(nobs, mean = 0, sd = 1)
#exposure of interest
x <- 1 + (alpha * z1) + (alpha * z2) + (alpha * z5) + (alpha * z6)
#outcome
y <- 1 + 0.5 + (0.170*z1) + (0.230*z3) + (0.170*z5) + (0.230*z7)
#missing data mechanism
#logit(p) <- -0.5 + (0.2*x) + (0.1*z1) +(0.1*z2). + (0.1*z3) + (0.1*z4)
p_data <- c(-0.05, 0.2, 0.1, 0.1, 0.1, 0.1)
p_mat <- matrix(p_data,nrow=6, ncol = 1, byrow = TRUE)
data <- data.frame(1, X1 = x, Z1 = z1, Z2 = z2, Z3 = z3, Z4 = z4 )
c_mat <- as.matrix(data)
logit_p = c_mat %*% p_mat
p = exp(logit_p) / (1 + exp(logit_p))
r_ind <- rbinom(nobs, 1, p)
y[r_ind==0] = NA
#complete case
mod_comp <- lm(y ~ x + z1 + z3 + z5 + z7)
#get summary stats
summary(mod_comp)
#stochastic regression
imp <- mice(data.frame(y=y, x=x, z1=z1, z2=z2,z3=z3, z5=z5, z7=z7), method="norm.nob", m=1, maxit = 1)
#impute data
imp_data <- complete(imp)
#fit linear stoch model
mod_stoch <- lm(y ~ x + z1 +  z3 + z5 + z7, data = imp_data)
summary(mod_stoch)
#ipw approach
miss <- data.frame(y=y, x=x, z1 = z1) %>%
mutate(obs = ifelse(is.na(y), yes = 0, no = 1))
#response model
mod_resp <- glm(obs ~ x + z1, data = miss, family = "binomial")
summary(mod_resp)
mod_ipw <- miss %>%
mutate(prob_obs = predict(mod_resp, type = "response"),
wt = ifelse(is.na(y), yes = 0, no =1/prob_obs))
#fit weighted linear model
ipw <- lm(y ~ x + z1, data = mod_ipw, weights = wt)
#get coefficient of x for complete case, stoch regression and ipw
comp_x <- summary(mod_comp)$coefficients[2]
stoch_x <- summary(mod_stoch)$coefficients[2]
ipw_x <- summary(ipw)$coefficients[2]
#add coefficients to matrix
beta_mat[i,1] <- comp_x
beta_mat[i,2] <- stoch_x
beta_mat[i,3] <- ipw_x
#get test errors
comp_std <- summary(mod_comp)$coefficients[3]
stoch_std <- summary(mod_stoch)$coefficients[3]
ipw_std <- summary(ipw)$coefficients[3]
test_mat[i,1] <- comp_std
test_mat[i,2] <- stoch_std
test_mat[i,3] <- ipw_std
}
#| label: setup
#| include: FALSE
library(mice)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE
, tidy=FALSE      # display code as typed
, size="small")   # slightly smaller font for code)
library(tidyverse)
library(logbin)
#set seed for reproducibility
set.seed(3)
#nsim
nsim <- 1
#nobs
nobs <- 1000
#initiate matrix to store standard errors
test_mat <- matrix(NA, nsim, 4)
for(i in 1:nsim){
#create predictor variables
x1 <- rnorm(nobs, mean = 0, sd = 1)
x2 <- rnorm(nobs, mean = 0, sd = 1)
x3 <- rnorm(nobs, mean = 0, sd = 1)
x4 <- rnorm(nobs, mean = 0, sd = 1)
x5 <- rnorm(nobs, mean = 0, sd = 1)
#outcome
y = x1 + x2 + x3 + x4 + x5
#missing data mechanism
p_data <- c(-0.05, 0.3, 0.3, 0.3)
p_mat <- matrix(p_data, nrow = 4, ncol = 1, byrow = TRUE)
data = data.frame(1, X1 = x1, X3 = x3, X5 = x5)
c_mat <- as.matrix(data)
logit_p = c_mat %*% p_mat
p = exp(logit_p) / (1 + exp(logit_p))
r_ind <- rbinom(nobs, 1, p)
y[r_ind==0] = NA
#complete case
mod_comp <- lm(y ~ x1 + x2 + x3 + x4 + x5)
#get summary stats
summary(mod_comp)
#IPW METHODS
miss <- data.frame(y=y, x1=x1, x2=x2, x3=x3, x4=x4, x5=x5) %>%
mutate(obs = ifelse(is.na(y), yes = 0, no = 1))
#1  LOGISTIC REGRESSION
#log_regression response model
mod_log <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss, family = "binomial")
summary(mod_log)
#calculate pred probs and weights
mod_log_ipw <- miss %>%
mutate(prob_obs = predict(mod_log, type = "response"),
wt = ifelse(is.na(y), yes = 0, no = 1/prob_obs))
#fit weighted linear model on log_reg
ipw_log <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_log_ipw, weights = wt)
#2 LOG BINOMIAL
# #log_binomial response model
# mod_logbin <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
#                   family = binomial(link = "log"))
# summary(mod_logbin)
#
# #calculate pred probs and weights
# mod_logbin_ipw <- miss %>%
#   mutate(prob_obs2 = predict(mod_logbin, type= "response"),
#          wt2 = ifelse(is.na(y), yes = 0, no = 1/ prob_obs2))
#
# #fit weighted linear model
# ipw_logbin <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_logbin_ipw,
#                  weights = wt2)
#3 POISSON IPW
#poisson response model
mod_pois <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
family = "poisson")
summary(mod_pois)
#calculate pred probs and weights
mod_pois_ipw <- miss %>%
mutate(prob_obs3 = predict(mod_pois, type= "response"),
wt3 = ifelse(is.na(y), yes = 0, no = 1/ prob_obs3))
#fit weighted linear model
ipw_pois <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_pois_ipw,
weights = wt3)
#4 PROBIT IPW
#fit probit response model
mod_prob <- glm(obs ~ x1 + x2 + x3 + x4 + x5, data = miss,
family = binomial(link = "probit"))
summary(mod_prob)
#calculate predicted probs and weights
mod_prob_ipw <- miss %>%
mutate(prob_obs4 = predict(mod_prob, type = "response"),
wt4 = ifelse(is.na(y), yes = 0, no = 1 / prob_obs4))
#fit weighted linear model
ipw_prob <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = mod_prob_ipw,
weights = wt4)
#get test errors for complete case, log_ipw, log_bin_ipw and poisson models
comp_std <- summary(mod_comp)$coefficicients[3]
log_std <- summary(ipw_log)$coefficicients[3]
#logbin_std <- summary(ipw_logbin)$coefficicients[3]
pois_std <- summary(ipw_pois)$coefficicients[3]
prob_std <- summary(ipw_prob)
test_mat[i,1] <- comp_std
test_mat[i,2] <- log_std
# test_mat[i,3] <- logbin_std
test_mat[i,3] <- pois_std
test_mat[i,4] <- prob_std
}
